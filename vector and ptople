#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

enum Score
{
    Unsatisfactory = 2,
    Satisfactory,
    Good,
    Excellent
};
struct Course
{
    std::string Title;
    Score Rating;
};
struct Student
{
    std::vector<Course> RecordBook;
};

float average(const Student& a)
{
    float sum = 0;
    float size = a.RecordBook.size();
    for (int i = 0; i < a.RecordBook.size(); ++i)
    {
        sum += a.RecordBook[i].Rating;
    }
    return (sum / size);
}

std::vector<float> allAverage(const std::vector<Student>& vec)
{
    std::vector<float> ve(vec.size());
    std::transform(vec.begin(), vec.end(), ve.begin(), average);
    return ve;
}

int main()
{
    Course al2 = { "Al", Score(2) };
    Course al3 = { "Al", Score(3) };
    Course al4 = { "Al", Score(4) };
    Course al5 = { "Al", Score(5) };
    Course math2 = { "Math", Score(2) };
    Course math3 = { "Math", Score(3) };
    Course math4 = { "Math", Score(4) };
    Course math5 = { "Math", Score(5) };
    Course ml2 = { "ML", Score(2) };
    Course ml3 = { "ML", Score(3) };
    Course ml4 = { "ML", Score(4) };
    Course ml5 = { "ML", Score(5) };
    std::vector<Course> s1 = { al5, math5, ml5 };
    std::vector<Course> s2 = { al4, math3, ml4 };
    std::vector<Course> s3 = { al5, math4, ml5 };
    std::vector<Course> s4 = { al2, math5, ml2 };
    Student student1 = { s1 };
    Student student2 = { s2 };
    Student student3 = { s3 };
    Student student4 = { s4 };
    std::vector<Student> students = { student1, student2, student3, student4 };
    std::vector<float> v = allAverage(students);
    for (auto s : v)
    {
        std::cout << s << std::endl;
    }

    return 0;
}
